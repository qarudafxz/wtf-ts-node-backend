import s from"express";import e from"cors";import t from"body-parser";import o from"dotenv";import r from"morgan";import n from"pg";import{v4 as a}from"uuid";import i from"bcrypt";import d from"jsonwebtoken";import u from"crypto-js";import c from"nodemailer";const l=new n.Pool({user:"postgres",host:"monorail.proxy.rlwy.net",database:"railway",password:"FBEgAf-52F3GG2F6ef6gd2CbAd15eDE5",port:41965}),m=(s,e,t)=>{try{if(!s.headers.session)return e.status(401).json({message:"Unauthorized"});t()}catch(s){console.log(s),e.status(500).json({message:"Internal Server Error"})}},g=()=>{const s=[];for(let e=0;e<4;e++)s.push(Math.floor(10*Math.random()));return s.join("")},p=s.Router();p.post("/verify",(async(s,e)=>{const{stud_id:t}=s.body;try{const s=await l.query(`SELECT * FROM admins WHERE admin_id = '${t}'`);if(0===s.rows.length)return e.status(400).json({message:"Admin not found!"});const o={session:a(),student_id:s.rows[0].admin_id,email:s.rows[0].email,college_id:s.rows[0].college_id,first_name:s.rows[0].first_name,last_name:s.rows[0].last_name,position:s.rows[0].position,role:s.rows[0].role,iat:(new Date).getTime()};if(!s.rows[0].is_verified)return e.status(400).json({message:"Admin not verified. Please verify your email first",email:s.rows[0].email,student_id:s.rows[0].admin_id,session:a()});e.status(200).json({student:s.rows[0],message:"Student ID found. Moving to the next process...",payload:o})}catch(s){console.log(s),e.status(500).json({message:"Internal Server Error"})}})),p.post("/login",(async(s,e)=>{const{student_id:t,password:o}=s.body;try{const s=await l.query(`SELECT * FROM admins WHERE admin_id = '${t}'`);if(0===s.rows.length)return e.status(400).json({message:"Student not found!"});if(!await i.compare(o,s.rows[0].password))return e.status(400).json({message:"Incorrect password!"});const r={session:a(),student_id:t,email:"",first_name:"",last_name:"",position:"",role:"",iat:(new Date).getTime()},n=d.sign(r,"super-secret",{expiresIn:"1h"});return e.status(200).json({message:"Login successful!",token:n})}catch(s){return console.log(s),e.status(500).json({message:"Internal Server Error"})}})),p.post("/register",(async(s,e)=>{try{const{first_name:t,last_name:o,student_id:r,email:n,password:d,position:u,is_checked:c}=s.body;if(!(t&&o&&r&&n&&d&&u))return e.status(400).json({message:"All fields are required."});if(!n.endsWith("@carsu.edu.ph"))return e.status(400).json({message:"Please use your school email!"});const m=c?"super":"admin",g=await i.genSalt(10),p=await i.hash(d,g),w=await l.query("INSERT INTO admins (admin_id, first_name, last_name, email, password, position, role, is_verified, college_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING admin_id, email",[r,t,o,n,p,u,m,!1,1]);await l.query("INSERT INTO permissions(can_add, can_delete, can_update, admin_id) VALUES ($1, $2, $3, $4) RETURNING *",[!0,!!c,!!c,w.rows[0].admin_id]);const f=a();e.status(200).json({message:"Student Admin registered successfully",token:f,admin:w.rows[0]})}catch(s){console.error(s),e.status(500).json({message:"Student admin already exists"})}})),p.post("/add-questions",m,(async(s,e)=>{const{student_id:t,questions:o}=s.body,r=u.AES.encrypt(o,"sekretong malupet pwede pabulong").toString();try{await l.query("INSERT INTO questions (admin_id, question) VALUES ($1, $2) RETURNING *",[t,r]),e.status(200).json({message:"Verification questions saved successfully"})}catch(s){console.error(s),e.status(500).json({message:"Internal Server Error"})}})),p.post("/verify-code",m,(async(s,e)=>{const{student_id:t,code:o,your_code:r}=s.body;try{if(o!==r)return e.status(400).json({message:"Invalid code"});const s=await l.query(`UPDATE admins SET is_verified = true WHERE admin_id = '${t}'`);e.status(200).json({message:"Verification successful",admin:s})}catch(s){console.log(s),e.status(500).json({message:"Internal Server Error"})}})),p.get("/get-colleges",(async s=>{try{const e=await l.query("SELECT * FROM colleges");return console.log(e.rows[0]),s.status(200).json({colleges:e.rows})}catch(e){return console.log(e),s.status(500).json({message:"Internal Server Error"})}})),p.get("/get-code",(async(s,e)=>{const{email:t}=s.headers,o=g();console.log(t);try{const s=c.createTransport({host:"smtp.gmail.com",port:587,secure:!1,auth:{user:"franfra10j@gmail.com",pass:"pnzdzfijogrukzlc"},tls:{rejectUnauthorized:!1}});await new Promise(((e,r)=>{s.sendMail({from:"",to:t,subject:"What the Fee\tVerification Code",text:`Your verification code is ${o}`},((s,t)=>{s?(console.error(s),r(s)):(console.log("Email sent successfully"),e(t))}))})),e.status(200).json({message:"Email sent successfully",code:o})}catch(s){console.log(s),e.status(500).json({message:"Internal server error"})}})),p.get("/info",(async(s,e)=>{const{student_id:t}=s.headers;try{const s=await l.query(`SELECT first_name FROM admins WHERE admin_id = '${t}'`);if(0===s.rows.length)return e.status(400).json({message:"Admin not found!"});const o=await l.query(`SELECT question FROM questions WHERE admin_id = '${t}'`);if(0===o.rows.length)return e.status(400).json({message:"No questions found!"});const r=u.AES.decrypt(o.rows[0].question,"sekretong malupet pwede pabulong"),n=JSON.parse(r.toString(u.enc.Utf8));e.status(200).json({admin:s.rows[0],questions:n})}catch(s){console.log(s),e.status(500).json({message:"Internal Server Error"})}})),p.put("/change-password",((s,e,t)=>{const{stage:o,student_id:r}=s.body;try{if(console.log(o,r),"3"!==o||!r)return console.log("No parameters acquired"),e.status(400).json({message:"No parameters acquired"});t()}catch(s){return e.status(500).json({message:"Internal Server Error"})}}),(async(s,e)=>{const{student_id:t,password:o}=s.body;try{if(!t||!o)return e.status(400).json({message:"Bad Request"});const s=await l.query(`\n\t\t\tSELECT admin_id, password FROM admins WHERE admin_id = '${t}'\n\t\t`);if(!s.rows.length)return e.status(400).json({message:"Invalid student ID"});const r=await i.compare(o,s.rows[0].password);if(console.log(o,s.rows[0].password),r)return e.status(400).json({message:"New password cannot be the same as the old one"});const n=await i.genSalt(10),a=await i.hash(o,n);return await l.query(`UPDATE admins SET password = '${a}' WHERE admin_id = '${t}'`),e.status(200).json({message:"Password changed successfully"})}catch(s){return console.log(s),e.status(500).json({message:"Internal Server Error"})}})),o.config();const w=s();w.use(s.json()),w.use(t.json()),w.use(e({origin:"*",methods:["GET","POST","PUT","DELETE"],credentials:!0})),w.use(r("tiny")),w.disable("x-powered-by"),w.use("/api/auth",p);try{l.connect().then((()=>console.log("Connected to Postgre Database. Ready to persist data and retrieve data")))}catch(s){throw new Error("Failed to connect to database")}w.listen(8080,(()=>{console.log("Server is running on port 8080")}));export{w as default};
